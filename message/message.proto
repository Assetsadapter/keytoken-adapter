syntax = "proto3";

package message;

message Tx {
  uint64 Nonce = 1;
  uint64 BlockNum = 2;
  uint64 Amount = 3;
  string From = 4;
  string To = 5;
  string Hash = 6;
  string Signature = 7;
  int64 Time = 8;
  string Script = 9;
  uint64 Fee = 10;
  bytes Root = 11;
  int32 Tag = 12;
}

message block {
  uint64 Height = 1;
  string PrevBlockHash = 2;
  repeated Tx Txs = 3;
  string Root = 4;
  uint64 Version = 5;
  int64 Timestamp = 6;
  string Hash = 7;
  string Miner = 8;
}

message req_signed_transaction {
  string from = 1;
  string to = 2;
  uint64 amount = 3;
  uint64 nonce = 4;
  int64 time = 5;
  bytes hash = 6;
  bytes signature = 7;
}

message hashMsg {
  int64 code = 1;
  string message = 2;
  string hash = 3;
}

message req_token_transaction {
  string from = 1;
  string to = 2;
  uint64 amount = 3;
  uint64 nonce = 4;
  string priv = 5;
  uint64 tokenAmount = 6;
  string symbol = 7;
  uint64 fee = 8;
  int64 time = 9;
  bytes hash = 10;
  bytes signature = 11;
}

message req_transaction {
  string From = 1;
  string To = 2;
  uint64 Amount = 3;
  uint64 Nonce = 4;
  string Priv = 5;
}

message req_balance { string address = 1; }
message res_balance { uint64 balnce = 1; }

message req_token_balance {
  string address = 1;
  string symbol = 2;
}
message resp_token_balance {
  uint64 balnce = 1;
  uint64 demic = 2;
}

message req_nonce { string address = 1; }
message respose_nonce { uint64 nonce = 1; }

message req_tx_by_hash { string hash = 1; }
message resp_tx_by_hash {
  int32 code = 1;
  string message = 2;
  Tx data = 3;
}

message req_max_block_number {}
message resp_max_block_number { uint64 maxNumber = 1; }

message req_block_by_number { uint64 height = 1; }
// message req_block_by_hash { string hash = 1; }

message resp_block {
  int32 code = 1;
  string message = 2;
  block data = 3;
}

message req_signed_transactions { repeated req_signed_transaction txs = 1; }
message resp_signed_transactions { repeated hashMsg hashList = 1; }

message req_token_transactions { repeated req_token_transaction txs = 1; }

message req_transactions { repeated req_transaction txs = 1; }
message resp_transactions { repeated hashMsg hashList = 1; }

service Greeter {
  rpc GetBalance(req_balance) returns(res_balance) {}
  rpc GetBalanceToken(req_token_balance) returns(resp_token_balance) {}
  rpc GetAddressNonceAt(req_nonce) returns(respose_nonce) {}
  rpc GetTxByHash(req_tx_by_hash) returns(resp_tx_by_hash) {}
  rpc GetMaxBlockNumber(req_max_block_number) returns(resp_max_block_number) {}
  rpc GetBlockByNum(req_block_by_number) returns(resp_block) {}
  rpc SendSignedTransactions(req_signed_transactions)
      returns(resp_signed_transactions) {}
  rpc SendSignedToken(req_token_transactions)
      returns(resp_signed_transactions) {}
  rpc SendTransactions(req_transactions) returns(resp_transactions) {}
}
